#
# Archivo: Leeme.txt
#
# Descripción: Archivo con la descripcion de los elementos que componen la
# aplicacion, tales como el contenido de cada archivo y sus funciones.
#
# Autores:
#	Samuel Arleo, 10-10969.
#	Pablo Maldonado, 12-10561
#
# Última modificación: 27/06/2016
#

Archivos:

	* Makefile: Permite realizar la compilacion del programa utilizando el comando "make".

	* cliente.c: Contiene la funcionalidad del cliente. En este se encuentra principalmente
		el main con las instrucciones que permiten recibir los argumentos del comando sem_cli.

	* servidor.c: Contiene la funcionalidad del servidor. En este se definen funciones tales
		como:

		- escribirBitacora(): Permite agregar los datos del vehiculo, fecha, hora y tipo de
		operacion para mantener un registro de la entrada y salida (en archivos separados).
		- agregarVehiculo(): Agrega un vehiculo nuevo a la estructura "vehiculo" que almacena 
		los vehiculos
		actualmente en el estacionamiento.
		- eliminarVehiculo(): Elimina un elemento de la estructura vehiculo (cuando sale del 
		estacionamiento)
		- imprimirLista(): Imprime una estuctura del tipo vehiculo.

		Ademas, contiene las estructuras de uso unico para el servidor: 

		- vehiculo: Almacena los vehiculos que entran al estacionamiento con sus fechas y hora
		de entrada y salida, de forma que sea posible calcular la tarifa al salir.
		- tiempo: Almacena los datos de un tiempo determinado.

	* lib_socket.c: Contiene funciones y estructuras que el codigo del cliente y el servidor 
		tienen en comun:

		-crearSocket(): Crea las un socket UDP.

Funcionamiento:

	Al ejecutar el comando sem_svr -l 4321 -i ./entrada.txt -o ./salida.txt, se ejecuta el
codigo en servidor.c, el cual realiza las acciones siguientes:

	- Utiliza los argumentos para su ejecucion (sin importar el orden
	de los argumentos). 
	- Crea un socket UPD utilizando el puerto indicado con el flag -l.
	- El socket comienza a escuchar por medio de recvfrom().
	- Al recibir un mensaje, lo "parsea" por medio del separador "/".
	- Dependiendo del tipo de mensaje genera una respuesta con la funcion sendTo()
	- Retorna a la espera de otros mensajes.

	Al ejecutar el comando sem_cli -d localhost -p puerto -c [se] -i serial, se ejecuta el
codigo en cliente.c, el cual realiza las acciones siguientes:

	- Utiliza los argumentos para su ejecucion (sin importar el orden
	de los argumentos). 
	- Crea un socket UPD utilizando el puerto indicado con el flag -l.
	- Dependiendo del tipo de operacion a realizar (entrada o salida), envia un mensaje 
	al servidor solicitando un servicio.
	- Se coloca a la espera de una respuesta.

Ejecucion del programa:

	Cliente: sem_cli -d IP|DN -p puerto -c [se] -i serial

		* -d: IP o nombre de dominio
		* -p puerto: Puerto del servidor a contactar
		* -c s|e : Operacion a solicitar al servidor (e: entrada de vehiculo, s: salida)
		* -i serial: Identificador del vehiculo.

	Servidor: sem_svr -l puerto_local -i bitacora_entrada.txt -o bitacora_salida.txt

		* -l puerto_local: Puerto local donde escuchara la aplicacion (si se corre
		en localhost debe ser distinto al del cliente).
		* -i bitacora_entrada.txt: Ruta al archivo donde almacenar el registro de entrada
		* -o bitacora_salida.txt:  Ruta al archivo donde almacenar el registro de salida
	

Condiciones particulares:

	- El tamano de las rutas bitacora_entrada.txt y bitacora_salida.txt no debe contener 
mas de 50 caracteres.
	- La longitud y formato del serial puede ser alfanumerico de logitud no mayor a 10.